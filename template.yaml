AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  NewMusicScanner

  Sample SAM Template for NewMusicScanner

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 100

Resources:
  #####################
  # Lambda Functions! #
  #####################
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: new-music-scanner/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
  TrackedArtistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: new-music-scanner/
      Handler: trackedArtists.getTrackedArtistsLambdaHandler
      Runtime: nodejs12.x
  UpdateTrackedArtistsFromPlaylist:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: new-music-scanner/
      Handler: trackedArtists.updateTrackedArtistsFromPlaylistLambdaHandler
      Runtime: nodejs12.x

  ArtistScanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: new-music-scanner/
      Handler: artistScan.artistScanLambdaHandler
      Runtime: nodejs12.x

  NewScanRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: new-music-scanner/
      Handler: scanRequests.newScanRequestLambdaHandler
      Runtime: nodejs12.x

  GetLatestRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: new-music-scanner/
      Handler: scanRequests.getLatestRequestLambdaHandler
      Runtime: nodejs12.x
      Events:
        GetLatestRequest:
          Type: Api
          Properties:
            Path: /latestRequest
            Method: get

  ##################
  # Dynamo Tables! #
  ##################
  TrackedArtistsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "artistId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "artistId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "newMusicScanner-trackedArtists"
  ScanRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "requestId"
          AttributeType: "S"
        -
          AttributeName: "requestTime"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "requestId"
          KeyType: "HASH"
        -
          AttributeName: "requestTime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "newMusicScanner-scanRequests"
  KnownAlbumsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "artistId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "artistId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "newMusicScanner-knownAlbums"
  FoundAlbumsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "requestId"
          AttributeType: "S"
        -
          AttributeName: "artistId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "requestId"
          KeyType: "HASH"
        -
          AttributeName: "artistId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "newMusicScanner-foundAlbums"


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn

  TrackedArtistsFunction:
    Description: "Tracked Artists Lambda Function ARN"
    Value: !GetAtt TrackedArtistsFunction.Arn
  TrackedArtistsFunctionIamRole:
    Description: "Implicit IAM Role created for Tracked Artists function"
    Value: !GetAtt TrackedArtistsFunctionRole.Arn

  ArtistScanFunction:
    Description: "Artist Scan Lambda function ARN"
    Value: !GetAtt ArtistScanFunction.Arn
  ArtistScanFunctionIamRole:
    Description: "Implicit IAM Role created for Artist Scan function"
    Value: !GetAtt ArtistScanFunctionRole.Arn

  LatestRequestApi:
    Description: "API Gateway endponit URL for Prod stage for Get Latest Request function."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/latestRequest"
